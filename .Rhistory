gen.vec.field<-function(no.dim=2,dim=rep(10,no.dim)){
stopifnot(length(dim)==no.dim)
apply(array(rnorm(no.dim*prod(dim)),
dim=c(no.dim,dim)),
2:(no.dim+1),function(vec) {vec/sqrt(sum(vec^2))})
}
get.noise.value<-function(points,vec.field,interp.fun="cubic"){
#determine dimensionality of vector field
if(is.vector(vec.field)==T){
no.dim<-1
}else{
no.dim<-dim(vec.field)[1]
#if only one interpolation function is specified, extrapolate interpolation function to all dimensions of vector
#field (converting from vector to character list in process)
if(length(interp.fun)==1){
interp.fun<-rep(list(interp.fun),no.dim)
}
}
#convert potential vector of interpolation functions to list
interp.fun<-as.list(interp.fun)
#replace any named functions in list of interpolation functions with their actual functions
interp.fun[interp.fun=="linear"]<-list(function(x) x)
interp.fun[interp.fun=="cubic"]<-list(function(x) -2*x^3+3*x^2)
interp.fun[interp.fun=="quintic"]<-list(function(x) 6*x^5-15*x^4+10*x^3)
#check that all elements of interpolation functions list are functions
stopifnot(all(lapply(interp.fun,is.function)))
if(is.null(nrow(points))){
no.points<-1
}else{
no.points<-nrow(points)
points<-as.matrix(points)
colnames(points)<-NULL
}
base.grid.point<-floor(points)
#make sure point and specified interpolation functions are of the same dimensionality as vector field
stopifnot(no.dim==length(points)/no.points&no.dim==length(interp.fun))
#find the lowest adjacent grid point
base.grid.point<-floor(points)
#make sure lowest adjacent grid point is no less than 1 and not greater than or equal the total number of grid
#points in any dimension (i.e., specified points lie within grid defined by vector field)
stopifnot(base.grid.point>=1&base.grid.point<dim(vec.field)[2:(no.dim+1)])
if(no.points==1){
#create a matrix of all adjacent grid points by forming all combinations between base grid coordinates and base grid
#coordinates + 1
adj.grid.points<-as.matrix(expand.grid(as.list(split(c(base.grid.point,base.grid.point+1),rep(1:no.dim,2)))))
#create a matrix of grid point vectors
if(no.dim==1){
grid.point.vecs<-matrix(vec.field[adj.grid.points],ncol=no.dim,byrow=T)
}else{
#create a matrix of indices indicating each element of all adjacent grid point vectors
indices<-cbind(1:no.dim,adj.grid.points[rep(1:nrow(adj.grid.points),each=no.dim),])
grid.point.vecs<-matrix(vec.field[indices],ncol=no.dim,byrow=T)
}
#create a matrix of vectors from grid points to p
vecs.to.p<-matrix(rep(points,nrow(adj.grid.points)),ncol=no.dim,byrow=T)-adj.grid.points
#create a vector of dot rpoducts of grid point vectors and vectors to p
quads<-2^(no.dim:0)
dot.products<-rep(0,sum(quads))
dot.products[1:quads[1]]<-rowSums(grid.point.vecs*vecs.to.p)
#find interpolated relative points
#see if there's a way to do this without a for loop
rel.p<-rep(0,no.dim)
for(i in 1:no.dim){
rel.p[i]<-interp.fun[[i]]((points-base.grid.point)[i])
}
for(i in 1:no.dim){
for(j in 1:quads[i+1]){
dot.products[sum(quads[1:i])+j]<-(1-rel.p[i])*dot.products[sum(c(0,quads)[1:i])+(j*2)-1]+rel.p[i]*dot.products[sum(c(0,quads)[1:i])+j*2]
}
}
dot.products[length(dot.products)]
}else{
###DO THIS FOR ALL UNIQUE FLOOR BASE.GRID.POINT VECTORS
unique.base.grid.point<-unique(base.grid.point)
unique.base.grid.point<-split(unique.base.grid.point,1:nrow(unique.base.grid.point))
unique.adj.grid.points<-lapply(unique.base.grid.point,function(x) as.matrix(expand.grid(as.list(split(c(x,x+1),rep(1:no.dim,2))))))
if(no.dim==1){
unique.grid.point.vecs<-lapply(unique.adj.grid.points, function(x) matrix(vec.field[x],ncol=no.dim,byrow=T))
}else{
unique.indices<-lapply(unique.adj.grid.points, function(x) cbind(1:no.dim,x[rep(1:nrow(x),each=no.dim),]))
unique.grid.point.vecs<-lapply(unique.indices, function(x) matrix(vec.field[x],ncol=no.dim,byrow=T))
}
noise.values<-rep(0,no.points)
for(p in 1:no.points){
###CALL ADJACENT GRID POINTS FOR BASE GRID POINTS OF CURRENT POINT
list.index<-which(sapply(unique.base.grid.point,function(x) identical(x,base.grid.point[p,])))
#create a matrix of vectors from grid points to p
vecs.to.p<-matrix(rep(points[p,],nrow(unique.adj.grid.points[[list.index]])),ncol=no.dim,byrow=T)-unique.adj.grid.points[[list.index]]
#create a vector of dot rpoducts of grid point vectors and vectors to p
quads<-2^(no.dim:0)
dot.products<-rep(0,sum(quads))
dot.products[1:quads[1]]<-rowSums(unique.grid.point.vecs[[list.index]]*vecs.to.p)
#find interpolated relative points
#see if there's a way to do this without a for loop
rel.p<-rep(0,no.dim)
for(i in 1:no.dim){
rel.p[i]<-interp.fun[[i]]((points[p,]-base.grid.point[p,])[i])
}
for(i in 1:no.dim){
for(j in 1:quads[i+1]){
dot.products[sum(quads[1:i])+j]<-(1-rel.p[i])*dot.products[sum(c(0,quads)[1:i])+(j*2)-1]+rel.p[i]*dot.products[sum(c(0,quads)[1:i])+j*2]
}
}
noise.values[p]<-dot.products[length(dot.products)]
}
noise.values
}
}
axis<-seq(1,10,length.out=101)[-101]
noise<-gen.vec.field(no.dim=3)
image(matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,2.1)),nrow=100))
library("magick")
source("perlin.noise.gen.R")
source("render.noise.R")
axis<-seq(1,10,length.out=51)[-51]
noise<-gen.vec.field(no.dim=3)
image(matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,2.1)),nrow=50))
render.noise(noise=vec,png.out.dir="noise_example",gif.name="render",y.compression=4)
noise<-gen.vec.field(no.dim=3)
set.seed(123)
axis<-seq(1,10,length.out=51)[-51]
noise<-gen.vec.field(no.dim=3)
interp.noise<-matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,2.1)),nrow=50)
image(interp.noise)
render.noise(noise=vec,png.out.dir="noise_example",gif.name="render",y.compression=4)
render.noise(noise=vec,png.out.dir="noise_example",gif.name="render",y.compression=4)
render.noise(noise=vec,png.out.dir="~/../noise_example",gif.name="render",y.compression=4)
render.noise(noise=interp.noise,png.out.dir="~/../noise_example",gif.name="render",y.compression=4)
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
library("magick")
source("perlin.noise.gen.R")
source("render.noise.R")
getwd()
library("magick")
source("perlin.noise.gen.R")
source("render.noise.R")
set.seed(123)
axis<-seq(1,10,length.out=51)[-51]
noise<-gen.vec.field(no.dim=3)
interp.noise<-matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,2.1)),nrow=50)
image(interp.noise)
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
interp.noise
interp.noise<-array(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,axis)),dim=c(50,50,50))
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
getwd()
setwd("C:/Users/bruce/Documents/git/phylosim)
setwd("C:/Users/bruce/Documents/git/phylosim")
setwd("noise_example")
getwd()
setwd("C:/Users/bruce/Documents/git/phylosim")
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,1))
,ncol=100)
library("magick")
source("perlin.noise.gen.R")
source("render.noise.R")
matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,1)),ncol=100)
set.seed(123)
axis<-seq(1,10,length.out=101)[-101]
noise<-gen.vec.field(no.dim=3)
matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,1)),ncol=100)
interp.noise<-sapply(1:100,function(ii) matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,ii)),ncol=100))
interp.noise<-sapply(axis,function(ii) matrix(get.noise.value(vec.field=noise,points=expand.grid(axis,axis,ii)),ncol=100))
interp.noise
?split
?subset
test<-array(interp.noise,dim=c(100,100,100))
image(test[,,1])
image(test[,,2])
image(test[,,3])
image(test[,,4])
image(test[,,5])
test<-array(t(interp.noise),dim=c(100,100,100))
image(test[,,1])
image(test[,,2])
image(test[,,3])
image(test[,,4])
interp.noise<-array(t(interp.noise),dim=c(100,100,100))
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
getwd()
setwd("C:/Users/bruce/Documents/git/phylosim")
render.noise<-function(noise,png.name="slice",gif.name="render",png.out.dir,
pre.clear.pngs=T,post.clear.pngs=T,width=600,height=420,
y.compression=1,x.offset=0.5,y.offset=0.05,line.width=8,gray.max=0.7,alpha=0.6,fps=20){
def.dir<-getwd()
setwd(png.out.dir)
if(pre.clear.pngs){
file.remove(list.files(pattern=".png"))
}
png(paste(png.name,"%02d.png",sep=""),width=width,height=height)
col.vec=gray(seq(gray.max,0,length.out=dim(noise)[2]),alpha=alpha)
for(j in 1:dim(noise)[3]){
plot((y.compression*noise[,1,j])~seq(1,dim(noise)[1]),type="l",xaxt='n',yaxt='n',xlab="",ylab="",lwd=line.width,col=col.vec[1],bty='n',
ylim=c(min(noise)*y.compression-(dim(noise)[2]+1)*y.offset,max(noise)*y.compression),xlim=c(1,dim(noise)[1]+(dim(noise)[1]+1)*x.offset))
for(i in 2:dim(noise)[2]){
lines(y=(y.compression*noise[,i,j])-(i-1)*y.offset,x=seq(1,dim(noise)[1])+(i-1)*x.offset,lwd=line.width,col=col.vec[i])
}
}
dev.off()
slices<-paste("slice",c(paste("0",1:9,sep=""),10:dim(noise)[3]),".png",sep="")
images<-list(NULL)
for(i in 1:dim(noise)[3]){
images[[i]]<-image_read(slices[i])
}
frames<-image_join(c(images))
animation<-image_animate(frames,fps=fps)
image_write(animation,paste(gif.name,".gif",sep=""))
if(post.clear.pngs==T){
file.remove(list.files(pattern=".png"))
}
setwd(def.dir)
}
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=4)
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=6)
render.noise(noise=interp.noise,png.out.dir="noise_example",gif.name="render",y.compression=2)
library(phytools)
source("gen.phylosim")
library(phytools)
source("gen.phylosim.R")
source("manip.phylosim.R")
test<-gen.phylosim(spec.rate=0.02)
plot(test)
set.seed(123)
test<-gen.phylosim()
plot(test)
set.seed(1234)
test<-gen.phylosim()
plot(test)
set.seed(1234)
phylosim<-gen.phylosim()
plot(phylosim)
phylosim.phylo<-trans.to.phylo(prune.to.lins(test,get.extant.lins(test)))
phylosim.phylo<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
library(phytools)
source("gen.phylosim.R")
source("manip.phylosim.R")
set.seed(1234)
phylosim<-gen.phylosim()
plot(phylosim)
phylosim.phylo<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
library(phytools)
source("gen.phylosim.R")
source("manip.phylosim.R")
set.seed(1234)
phylosim<-gen.phylosim()
plot(phylosim)
phylosim.phylo<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
library(phytools)
source("gen.phylosim.R")
source("manip.phylosim.R")
set.seed(1234)
phylosim<-gen.phylosim()
plot(phylosim)
tree<-trans.to.phylo(phylosim)
tree.extant<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
plot(tree$tree)
plot(tree.extant$tree)
phenogram(tree$tree,tree$trait)
phenogram(tree$tree,tree$trait,ftype='off')
phenogram(tree.extant$tree,tree.extant$trait,ftype='off')
ltt(tree$tree)
ltt(tree.extant$tree)
spec.rate=phylosim$params["speciation rate"];ext.rate=phylosim$params["extinction rate"];res=phylosim$params["resolution"]
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
##LINEAGE THROUGH TIME PLOT##
no.lineage<-colSums(!is.na(test$trait))
plot(log(no.lineage)~test$time.pts,type="l")
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
ltt(tree$tree);lines(expec)
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts)
ltt(tree.extant$tree);lines(log(expec)~phylosim$time.pts)
set.seed(7996)
phylosim<-gen.phylosim()
plot(phylosim)
tree<-trans.to.phylo(phylosim)
tree.extant<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
plot(tree$tree)
plot(tree.extant$tree)
phenogram(tree$tree,tree$trait,ftype='off')
phenogram(tree.extant$tree,tree.extant$trait,ftype='off')
plot(phylosim)
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
ltt(tree.extant$tree);lines(log(expec)~phylosim$time.pts,lty=2)
expec<-c(2,rep(2+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
expec<-c(2,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
ltt(tree.extant$tree);lines(log(expec)~phylosim$time.pts,lty=2)
spec.rate<-phylosim$params["speciation rate"];ext.rate<-phylosim$params["extinction rate"];res<-phylosim$params["resolution"]
no.lineage<-colSums(!is.na(test$trait))
plot(log(no.lineage)~test$time.pts,type="l")
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
expec<-c(2,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
no.lineage<-colSums(!is.na(test$trait))
plot(log(no.lineage)~test$time.pts,type="l")
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
get.bd(phylosim,1:nrow(phylosim$trait))
phylosim$trait
get.bd(phylosim,1:nrow(phylosim$trait))
get.bd(phylosim)
nodes[get.bd(phylosim),"time"]
phylosim$nodes[get.bd(phylosim),"time"]
matrix(phylosim$nodes[get.bd(phylosim),"time"],nrow=2)
matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
bd.times<-matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
indicator<-rep(c("b","d"),each=nrow(bd.times))
bd.times<-matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
indicator<-rep(c("b","d"),each=nrow(bd.times))
for(i in as.vector(bd.times)){
time<-as.vector(bd.times)[i]
bord<-ifelse(indicator=="b",1,-1)
}
no.lineage<-cumsum(bord)
no.lineage
plot(no.lineage)
no.lineage<-cumsum(bord[order(time)])
plot(no.lineage)
no.lineage
bord
bord[order(time)]
time
time<-as.vector(bd.times)
indicator<-rep(c("b","d"),each=nrow(bd.times))
bord<-ifelse(indicator=="b",1,-1)
no.lineage<-cumsum(bord[order(time)])
plot(no.lineage)
plot(no.lineage~time)
plot(no.lineage~sort(time))
bord<-c(0,1)*rep(bord,each=2)
bord
bd.times<-matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
time<-as.vector(bd.times)
indicator<-rep(c("b","d"),each=nrow(bd.times))
bord<-ifelse(indicator=="b",1,-1)
bord<-c(0,1)*rep(bord[order(time)],each=2)
bord
no.lineage<-cumsum(bord)
plot(no.lineage~rep(sort(time),eaach=2))
plot(no.lineage)
plot(no.lineage~rep(sort(time),each=2))
plot(no.lineage~rep(sort(time),each=2),type='l')
plot(log(no.lineage)~rep(sort(time),each=2),type='l')
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
expec<-c(2,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
ltt(tree.extant$tree);lines(log(expec)~phylosim$time.pts,lty=2)
spec.rate<-phylosim$params["speciation rate"];ext.rate<-phylosim$params["extinction rate"];res<-phylosim$params["resolution"]
bd.times<-matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
time<-as.vector(bd.times)
indicator<-rep(c("b","d"),each=nrow(bd.times))
bord<-ifelse(indicator=="b",1,-1)
bord<-c(0,1)*rep(bord[order(time)],each=2)
no.lineage<-cumsum(bord)
time<-rep(sort(time),each=2)
no.lineage<-no.lineage[time!=max(phylosim$time.pts)]
time<-time[time!=max(phylosim$time.pts)]
no.lineage<-c(no.lineage,no.lineage[length(no.lineage)])
time<-c(time,max(phylosim$time.pts))
plot(log(no.lineage)~time,type='l')
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
set.seed(41996)
phylosim<-gen.phylosim()
plot(phylosim)
set.seed(041996)
phylosim<-gen.phylosim()
plot(phylosim)
set.seed(1122)
phylosim<-gen.phylosim()
plot(phylosim)
tree<-trans.to.phylo(phylosim)
tree.extant<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
plot(tree$tree)
plot(phylosim)
set.seed(12345)
phylosim<-gen.phylosim()
plot(phylosim)
set.seed(7996)
phylosim<-gen.phylosim()
plot(phylosim)
tree<-trans.to.phylo(phylosim)
tree.extant<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
plot(tree$tree)
plot(tree.extant$tree)
library(phytools)
source("gen.phylosim.R")
source("manip.phylosim.R")
set.seed(7996)
##generate and visualize simulation##
phylosim<-gen.phylosim()
plot(phylosim)
##transform to phylo object and visualize (can even prune off extinct lineages!)##
tree<-trans.to.phylo(phylosim)
tree.extant<-trans.to.phylo(prune.to.lins(phylosim,get.extant.lins(phylosim)))
plot(tree$tree)
plot(tree.extant$tree)
##pass phylo object and associated trait values through phenogram function, note that it's identical to the simulation minus##
##anagenetic changes along branches##
phenogram(tree$tree,tree$trait,ftype='off')
phenogram(tree.extant$tree,tree.extant$trait,ftype='off')
##looking at lineage through time plots, noting that lineage accumulation seems to match up with the rate expected given the net##
##diversification rate used to simulate. The intercept doesn't seem to match well, but this is expected with the ascertainment##
##bias inherent with simulating bd trees (I purposefully set the seed to a value where the tree doesn't end up just going##
##extinct)##
##first I will do this simply with the phylo objects##
expec<-c(2,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
ltt(tree$tree);lines(log(expec)~phylosim$time.pts,lty=2)
ltt(tree.extant$tree);lines(log(expec)~phylosim$time.pts,lty=2)
##haven't yet made simple function for getting ltt's from phylosim object directly, but here's a (relatively) easy way to do it##
spec.rate<-phylosim$params["speciation rate"];ext.rate<-phylosim$params["extinction rate"];res<-phylosim$params["resolution"]
bd.times<-matrix(phylosim$nodes[get.bd(phylosim),"time"],ncol=2)
time<-as.vector(bd.times)
indicator<-rep(c("b","d"),each=nrow(bd.times))
bord<-ifelse(indicator=="b",1,-1)
bord<-c(0,1)*rep(bord[order(time)],each=2)
no.lineage<-cumsum(bord)
time<-rep(sort(time),each=2)
no.lineage<-no.lineage[time!=max(phylosim$time.pts)]
time<-time[time!=max(phylosim$time.pts)]
no.lineage<-c(no.lineage,no.lineage[length(no.lineage)])
time<-c(time,max(phylosim$time.pts))
plot(log(no.lineage)~time,type='l')
expec<-c(1,rep(1+(spec.rate-ext.rate)*res,length(test$time.pts)-1))
expec<-cumprod(expec)
lines(log(expec)~test$time.pts,lty=2)
##note that the lineage through time plot for the phylosim object is identical to that of the phylo object, but with a##
##non-zero period where the phylogeny consisted of only 1 lineage##
